import axios from 'axios'
import Head from 'next/head'
import React from 'react'
import styles from '../styles/Home.module.css'
import CustomChart, { ChartData } from '../components/CustomChart'
import { useRouter } from 'next/router'
import FlagBtn from '../components/FlagBtn'
import DatePicker from '../components/DatePicker'

export async function getServerSideProps({ query }: any) {
  try {
    if (query.from && query.to) {
      if (query.from > query.to) {
        return {
          redirect: {
            destination: `?from=${query.from}&to=${query.from}`,
            permanent: false,
          },
        }
      }
      const data = await getData(query.from, query.to)
      return { props: { data } }
    }
    const data = await getData()
    return {
      props: {
        data,
      },
    }
  } catch (error) {
    console.log(error)
    return {
      notFound: true,
    }
  }
}

async function getData(from: string = '2022-04-12', to: string = '2022-04-17') {
  let url = `${process.env.API_URL}/api/chart-query?to=${to}&from=${from}`
  const res = await axios.get(url)
  return res.data.aggregations['0'].buckets
}

function Home({ data }: any) {
  const [chartData, setChartData] = React.useState<ChartData>({} as ChartData)
  const [initData, setInitData] = React.useState<ChartData>({} as ChartData)
  const [renderChart, setRenderChart] = React.useState(false)
  const [activeCountries, setActiveCountries] = React.useState<{
    [key: string]: boolean
  }>({
    au: true,
    br: true,
    gb: true,
    us: true,
    se: true,
    global: true,
  })

  const router = useRouter()

  React.useEffect(() => {
    setRenderChart(false)
    const labels = data[0]['1']?.buckets
      .filter((d: any) => d.doc_count > 0)
      .map((key: any) => key.key_as_string.substring(0, 10))

    const series = data.map((d: any) => {
      return {
        name: d.key,
        data: d['1']?.buckets
          .filter((doc: any) => doc.doc_count > 0)
          .map((key: any) => key['2']?.value),
      }
    })
    setInitData({ labels, series })
    setChartData({
      labels,
      series,
    })
  }, [data, router.query])

  React.useEffect(() => {
    setRenderChart(true)
  }, [chartData])

  const handleActiveFlags = (country: string) => {
    setActiveCountries({
      ...activeCountries,
      [country]: !activeCountries[country],
    })
  }

  React.useEffect(() => {
    setRenderChart(false)

    const countries: { [key: string]: string } = {
      global: 'Global',
      se: 'Sverige',
      us: 'United States of America',
      gb: 'United Kingdom',
      br: 'Brazil',
      au: 'Australia',
    }

    const series = initData.series
    if (series) {
      const newSeries = series.filter((s: any) => {
        const name = Object.keys(countries).find(
          (key) => countries[key] === s.name
        )
        return activeCountries[name!]
      })
      setChartData((prev) => ({
        ...prev,
        series: newSeries,
      }))
    }
  }, [activeCountries, initData])

  return (
    <div className={styles.container}>
      <Head>
        <title>Spotify Top 200 streams</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <DatePicker />
        <div className={styles.flagContainer}>
          {Object.entries(activeCountries).map(([key, value]) => {
            return (
              <FlagBtn
                onClick={() => handleActiveFlags(`${key}`)}
                key={key}
                active={value}
                code={key}
              />
            )
          })}
        </div>

        {renderChart && <CustomChart data={chartData} type="area" />}
      </main>
    </div>
  )
}

export default Home
